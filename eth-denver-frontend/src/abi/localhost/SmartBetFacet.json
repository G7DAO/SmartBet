{
  "address": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sessionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "combination",
          "type": "bytes"
        }
      ],
      "name": "CombinationSumitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "validUntil",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "rules",
              "type": "uint256[]"
            },
            {
              "internalType": "string",
              "name": "cid",
              "type": "string"
            }
          ],
          "indexed": false,
          "internalType": "struct LibSmartBet.Game",
          "name": "gameData",
          "type": "tuple"
        }
      ],
      "name": "GameOpened",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sessionId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "moveData",
              "type": "bytes"
            },
            {
              "internalType": "enum LibSmartBet.Moves",
              "name": "moveType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "player",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct LibSmartBet.Move",
          "name": "moveData",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isFinalMove",
          "type": "bool"
        }
      ],
      "name": "MoveSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sessionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "SessionEnded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sessionId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "players",
              "type": "address[]"
            },
            {
              "internalType": "bytes32[]",
              "name": "combinationHashes",
              "type": "bytes32[]"
            },
            {
              "internalType": "uint256",
              "name": "turnOf",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "canPlay",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "gameId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "finalStep",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "winner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "moveCount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct LibSmartBet.Session",
          "name": "sessionData",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "SessionJoined",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sessionId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "players",
              "type": "address[]"
            },
            {
              "internalType": "bytes32[]",
              "name": "combinationHashes",
              "type": "bytes32[]"
            },
            {
              "internalType": "uint256",
              "name": "turnOf",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "canPlay",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "gameId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "finalStep",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "winner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "moveCount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct LibSmartBet.Session",
          "name": "sessionData",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "SessionOpened",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_inputHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "internalType": "uint256[]",
          "name": "combination",
          "type": "uint256[]"
        }
      ],
      "name": "compare",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllGamesInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "validUntil",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "rules",
              "type": "uint256[]"
            },
            {
              "internalType": "string",
              "name": "cid",
              "type": "string"
            }
          ],
          "internalType": "struct LibSmartBet.Game[]",
          "name": "games",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllSessionsInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "players",
              "type": "address[]"
            },
            {
              "internalType": "bytes32[]",
              "name": "combinationHashes",
              "type": "bytes32[]"
            },
            {
              "internalType": "uint256",
              "name": "turnOf",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "canPlay",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "gameId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "finalStep",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "winner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "moveCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibSmartBet.Session[]",
          "name": "sessions",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGameEngine",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "getGameInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "validUntil",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "rules",
              "type": "uint256[]"
            },
            {
              "internalType": "string",
              "name": "cid",
              "type": "string"
            }
          ],
          "internalType": "struct LibSmartBet.Game",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sessionId",
          "type": "uint256"
        }
      ],
      "name": "getSessionInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "players",
              "type": "address[]"
            },
            {
              "internalType": "bytes32[]",
              "name": "combinationHashes",
              "type": "bytes32[]"
            },
            {
              "internalType": "uint256",
              "name": "turnOf",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "canPlay",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "gameId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "finalStep",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "winner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "moveCount",
              "type": "uint256"
            }
          ],
          "internalType": "struct LibSmartBet.Session",
          "name": "session",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "player",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "combinationData",
              "type": "bytes"
            }
          ],
          "internalType": "struct LibSmartBet.Combination[]",
          "name": "combinations",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "moveData",
              "type": "bytes"
            },
            {
              "internalType": "enum LibSmartBet.Moves",
              "name": "moveType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "player",
              "type": "address"
            }
          ],
          "internalType": "struct LibSmartBet.Move",
          "name": "currMove",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sessionId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "combinationHash",
          "type": "bytes32"
        }
      ],
      "name": "joinSession",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_validUntil",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_rules",
          "type": "uint256[]"
        },
        {
          "internalType": "string",
          "name": "cid",
          "type": "string"
        }
      ],
      "name": "openGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "combinationHash",
          "type": "bytes32"
        }
      ],
      "name": "openSession",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gameEngineAddr",
          "type": "address"
        }
      ],
      "name": "setGameEngine",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sessionId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "combination",
          "type": "bytes"
        }
      ],
      "name": "submitCombitation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "moveData",
              "type": "bytes"
            },
            {
              "internalType": "enum LibSmartBet.Moves",
              "name": "moveType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "player",
              "type": "address"
            }
          ],
          "internalType": "struct LibSmartBet.Move",
          "name": "_move",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "sessionId",
          "type": "uint256"
        }
      ],
      "name": "submitMove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x47f7217ac567048eb58b7fe71bd09c55fa782b0c81755ab68a4941d7e49e582b",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
    "transactionIndex": 0,
    "gasUsed": "2327439",
    "logsBloom": "0x
    "blockHash": "0xf415ceb66b90cb0a910c206c64e0a016c35cdf4991b3a6089c1545502b4cebf3",
    "transactionHash": "0x47f7217ac567048eb58b7fe71bd09c55fa782b0c81755ab68a4941d7e49e582b",
    "logs": [],
    "blockNumber": 7,
    "cumulativeGasUsed": "2327439",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "57ec3976d11a2b6e33402339eb22cc99",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sessionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"combination\",\"type\":\"bytes\"}],\"name\":\"CombinationSumitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"rules\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct LibSmartBet.Game\",\"name\":\"gameData\",\"type\":\"tuple\"}],\"name\":\"GameOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sessionId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"moveData\",\"type\":\"bytes\"},{\"internalType\":\"enum LibSmartBet.Moves\",\"name\":\"moveType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct LibSmartBet.Move\",\"name\":\"moveData\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isFinalMove\",\"type\":\"bool\"}],\"name\":\"MoveSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sessionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"SessionEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sessionId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"players\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"combinationHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"turnOf\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canPlay\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"finalStep\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"moveCount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct LibSmartBet.Session\",\"name\":\"sessionData\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"SessionJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sessionId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"players\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"combinationHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"turnOf\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canPlay\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"finalStep\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"moveCount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct LibSmartBet.Session\",\"name\":\"sessionData\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"SessionOpened\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_inputHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"combination\",\"type\":\"uint256[]\"}],\"name\":\"compare\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllGamesInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"rules\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"}],\"internalType\":\"struct LibSmartBet.Game[]\",\"name\":\"games\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllSessionsInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"players\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"combinationHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"turnOf\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canPlay\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"finalStep\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"moveCount\",\"type\":\"uint256\"}],\"internalType\":\"struct LibSmartBet.Session[]\",\"name\":\"sessions\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGameEngine\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getGameInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"validUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"rules\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"}],\"internalType\":\"struct LibSmartBet.Game\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sessionId\",\"type\":\"uint256\"}],\"name\":\"getSessionInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"players\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"combinationHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"turnOf\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canPlay\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"finalStep\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"moveCount\",\"type\":\"uint256\"}],\"internalType\":\"struct LibSmartBet.Session\",\"name\":\"session\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"combinationData\",\"type\":\"bytes\"}],\"internalType\":\"struct LibSmartBet.Combination[]\",\"name\":\"combinations\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"moveData\",\"type\":\"bytes\"},{\"internalType\":\"enum LibSmartBet.Moves\",\"name\":\"moveType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"internalType\":\"struct LibSmartBet.Move\",\"name\":\"currMove\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sessionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"combinationHash\",\"type\":\"bytes32\"}],\"name\":\"joinSession\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_validUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_rules\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"openGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"combinationHash\",\"type\":\"bytes32\"}],\"name\":\"openSession\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gameEngineAddr\",\"type\":\"address\"}],\"name\":\"setGameEngine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sessionId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"combination\",\"type\":\"bytes\"}],\"name\":\"submitCombitation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"moveData\",\"type\":\"bytes\"},{\"internalType\":\"enum LibSmartBet.Moves\",\"name\":\"moveType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"internalType\":\"struct LibSmartBet.Move\",\"name\":\"_move\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"sessionId\",\"type\":\"uint256\"}],\"name\":\"submitMove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Carlos Ramos\",\"details\":\"contract needs to check weather the caller is a member of the DAO - need to add terminus \",\"events\":{\"CombinationSumitted(uint256,address,bytes)\":{\"params\":{\"combination\":\"- the combination submitted\",\"player\":\"- the one owner of the combination\",\"sessionId\":\"- index of the session\"}},\"GameOpened(uint256,(address,uint256,uint256[],string))\":{\"params\":{\"gameData\":\"- data of the new game created\",\"gameId\":\"- the index of the new game\"}},\"MoveSubmitted(uint256,(bytes,uint8,address),address,bool)\":{\"params\":{\"isFinalMove\":\"- weather will require you to submit combination\",\"moveData\":\"- data of the session\",\"player\":\"- the one who submits the move\",\"sessionId\":\"- the index of the session\"}},\"SessionEnded(uint256,address)\":{\"params\":{\"sessionId\":\"- index of the session\",\"winner\":\"- the winner of the game\"}},\"SessionJoined(uint256,(address[],bytes32[],uint256,bool,uint256,bool,bool,address,uint256),address)\":{\"params\":{\"player\":\"- the one who joins the session\",\"sessionData\":\"- data of the session\",\"sessionId\":\"- the index of the session\"}},\"SessionOpened(uint256,(address[],bytes32[],uint256,bool,uint256,bool,bool,address,uint256),address)\":{\"params\":{\"player\":\"- the one who opened the session\",\"sessionData\":\"- data of the session, data contains weather a session can be started\",\"sessionId\":\"- the index of the new session\"}}},\"kind\":\"dev\",\"methods\":{\"joinSession(uint256,bytes32)\":{\"params\":{\"combinationHash\":\"- the combination hash of the player who joins this session\",\"sessionId\":\"- the index of the session\"}},\"openGame(address,uint256,uint256[],string)\":{\"params\":{\"_rules\":\"- the set of rules that the game has to follow\",\"_tokenAddr\":\"- the address of the 1155 to give after completing this game\",\"_validUntil\":\"- the deadline to play this game\",\"cid\":\"- the pdf stored in ipfs\"}},\"openSession(uint256,bytes32)\":{\"params\":{\"combinationHash\":\"- the combination hash of the first player\",\"gameId\":\"- the index of the game to open a session for\"}},\"setGameEngine(address)\":{\"details\":\"Owner can set the game engine Addr\",\"params\":{\"gameEngineAddr\":\"- \"}},\"submitCombitation(uint256,string,bytes)\":{\"details\":\"submits a combination to be verified with the initial hashed combination\",\"params\":{\"combination\":\"- the combination submitted when joined the game\",\"key\":\"- the key the user used to submit when joined the game\",\"sessionId\":\"- the index of the session\"}},\"submitMove((bytes,uint8,address),uint256)\":{\"params\":{\"_move\":\"- the data of the move being submitted\",\"sessionId\":\"- the index of the session\"}}},\"title\":\"SmartFacet Smart Contract\",\"version\":1},\"userdoc\":{\"events\":{\"CombinationSumitted(uint256,address,bytes)\":{\"notice\":\"Emitted when combination is submitted\"},\"GameOpened(uint256,(address,uint256,uint256[],string))\":{\"notice\":\"Emitted when Game is opened by the owner\"},\"MoveSubmitted(uint256,(bytes,uint8,address),address,bool)\":{\"notice\":\"Emitted when a move is submitted\"},\"SessionEnded(uint256,address)\":{\"notice\":\"Emitted when session finishes\"},\"SessionJoined(uint256,(address[],bytes32[],uint256,bool,uint256,bool,bool,address,uint256),address)\":{\"notice\":\"Emitted when a user joins a session\"},\"SessionOpened(uint256,(address[],bytes32[],uint256,bool,uint256,bool,bool,address,uint256),address)\":{\"notice\":\"Emitted when a new session is created\"}},\"kind\":\"user\",\"methods\":{\"joinSession(uint256,bytes32)\":{\"notice\":\"joins a session that is already existing and pending\"},\"openGame(address,uint256,uint256[],string)\":{\"notice\":\"owner creates a new game\"},\"openSession(uint256,bytes32)\":{\"notice\":\"creates a session for the a given game\"},\"submitMove((bytes,uint8,address),uint256)\":{\"notice\":\"submits a move for the ongoing session         only if is the turn of the caller\"}},\"notice\":\"Development in progress - can contribute to the repo https://github.com/jrcarlos2000/eth-denver-contracts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/SmartBetFacet.sol\":\"SmartBetFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/facets/SmartBetFacet.sol\":{\"content\":\"pragma solidity ^0.8.17;\\n\\nimport {LibSmartBet} from \\\"../libraries/LibSmartBet.sol\\\";\\nimport {LibDiamond} from \\\"../libraries/LibDiamond.sol\\\";\\nimport {IMockERC1155} from \\\"../interfaces/IMockERC1155.sol\\\";\\nimport {IGameEngine} from \\\"../interfaces/IGameEngine.sol\\\";\\n\\n/**\\n * @title SmartFacet Smart Contract\\n * @author Carlos Ramos\\n * @notice Development in progress - can contribute to the repo https://github.com/jrcarlos2000/eth-denver-contracts\\n * @dev contract needs to check weather the caller is a member of the DAO - need to add terminus \\n */\\n\\ncontract SmartBetFacet {\\n\\n    uint256 constant MIN_TIME = 3 days; // minimun duration of a game\\n\\n    /**\\n     * @notice Emitted when Game is opened by the owner\\n     * @param gameId - the index of the new game\\n     * @param  gameData - data of the new game created\\n     */\\n    event GameOpened(uint256 gameId, LibSmartBet.Game gameData);\\n\\n    /**\\n     * @notice Emitted when a new session is created\\n     * @param sessionId - the index of the new session\\n     * @param sessionData - data of the session, data contains weather a session can be started\\n     * @param player - the one who opened the session\\n     */\\n    event SessionOpened(uint256 sessionId, LibSmartBet.Session sessionData, address player);\\n\\n    /**\\n     * @notice Emitted when a user joins a session\\n     * @param sessionId - the index of the session\\n     * @param sessionData - data of the session\\n     * @param player - the one who joins the session\\n     */\\n    event SessionJoined(uint256 sessionId, LibSmartBet.Session sessionData, address player);\\n\\n    /**\\n     * @notice Emitted when a move is submitted\\n     * @param sessionId - the index of the session\\n     * @param moveData - data of the session\\n     * @param player - the one who submits the move\\n     * @param isFinalMove - weather will require you to submit combination\\n     */\\n    event MoveSubmitted(uint256 sessionId, LibSmartBet.Move moveData, address player, bool isFinalMove);\\n\\n    /**\\n     * @notice Emitted when combination is submitted\\n     * @param sessionId - index of the session\\n     * @param player - the one owner of the combination\\n     * @param combination - the combination submitted\\n     */\\n    event CombinationSumitted(uint256 sessionId, address player, bytes combination);\\n\\n    /**\\n     * @notice Emitted when session finishes\\n     * @param sessionId - index of the session\\n     * @param winner - the winner of the game\\n     */\\n    event SessionEnded(uint256 sessionId, address winner);\\n\\n    function _onlyOwner() internal view {\\n        require(LibDiamond.contractOwner() == msg.sender, \\\"SmartBetFacet : Function can only be called by owner\\\");\\n    }\\n\\n    modifier isActiveSession(uint256 sessionId) {\\n        require(LibSmartBet.smartBetStorage().sessionBook[sessionId].isActive,\\\"SmartBetFacet : Session not active\\\");\\n        _;\\n    }\\n\\n    modifier canMakeMove(uint256 sessionId) {\\n        LibSmartBet.Session memory session = LibSmartBet.smartBetStorage().sessionBook[sessionId];\\n        require(session.players[session.turnOf] == msg.sender, \\\"not turn of the sender\\\");\\n        require(session.canPlay, \\\"session hasnt started\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice owner creates a new game\\n     * @param _tokenAddr - the address of the 1155 to give after completing this game\\n     * @param _validUntil - the deadline to play this game\\n     * @param _rules - the set of rules that the game has to follow\\n     * @param cid - the pdf stored in ipfs\\n     */\\n    function openGame(address _tokenAddr, uint256 _validUntil, uint256[] calldata _rules, string calldata cid) external {\\n        require(block.timestamp + MIN_TIME < _validUntil, \\\"SmartBet : End time is too soon\\\");\\n        LibSmartBet.Game memory newGame = LibSmartBet.Game({\\n            tokenAddr : _tokenAddr,\\n            validUntil : _validUntil,\\n            rules : _rules,\\n            cid : cid\\n        });\\n        LibSmartBet.SmartBetStorage storage ds = LibSmartBet.smartBetStorage();\\n        ds.gameCount ++;\\n        ds.gameBook[ds.gameCount] = newGame;\\n        emit GameOpened(ds.gameCount,newGame);\\n    }\\n\\n    /**\\n     * @notice creates a session for the a given game\\n     * @param gameId - the index of the game to open a session for\\n     * @param combinationHash - the combination hash of the first player\\n     */\\n    function openSession(uint256 gameId, bytes32 combinationHash) external {\\n        LibSmartBet.SmartBetStorage storage ds = LibSmartBet.smartBetStorage();\\n        ds.hasPlayedGame[gameId][msg.sender] = true;\\n        address[] memory players;        \\n        bytes32[] memory combinationHashes;\\n        ds.sessionCount ++;\\n        ds.sessionBook[ds.sessionCount] = LibSmartBet.Session({\\n            players : players,\\n            combinationHashes : combinationHashes,\\n            turnOf : 0,\\n            canPlay : false,\\n            gameId : gameId,\\n            finalStep : false,\\n            isActive : true,\\n            winner : address(0),\\n            moveCount : 0\\n        });\\n        ds.sessionBook[ds.sessionCount].players.push(msg.sender);\\n        ds.sessionBook[ds.sessionCount].combinationHashes.push(combinationHash);\\n        emit SessionOpened(ds.sessionCount,ds.sessionBook[ds.sessionCount],msg.sender);\\n    }   \\n    /**\\n     * @notice joins a session that is already existing and pending\\n     * @param sessionId - the index of the session\\n     * @param combinationHash - the combination hash of the player who joins this session\\n     */\\n    //TODO : check if the user is already in the session\\n    function joinSession(uint256 sessionId, bytes32 combinationHash) external {\\n        LibSmartBet.SmartBetStorage storage ds = LibSmartBet.smartBetStorage();\\n        ds.sessionBook[sessionId].players.push(msg.sender);\\n        ds.sessionBook[ds.sessionCount].combinationHashes.push(combinationHash);\\n        ds.hasPlayedGame[ds.sessionBook[sessionId].gameId][msg.sender] = true;\\n        ds.sessionBook[sessionId].canPlay = true;\\n        //TODO RANDOM NUMBER to choose who starts\\n        emit SessionJoined(sessionId, ds.sessionBook[sessionId], msg.sender);\\n    }\\n\\n    /**\\n     * @notice submits a move for the ongoing session\\n     *         only if is the turn of the caller\\n     * @param _move - the data of the move being submitted\\n     * @param sessionId - the index of the session\\n     */\\n    function submitMove(LibSmartBet.Move memory _move, uint256 sessionId) external canMakeMove(sessionId) {\\n        LibSmartBet.SmartBetStorage storage ds = LibSmartBet.smartBetStorage();\\n        IGameEngine gameEngine = IGameEngine(ds.gameEngine);\\n        require(gameEngine.checkIsValidMove(ds.sessionCurrMove[sessionId],_move),\\\"SmartBet : Move not valid\\\");\\n        ds.sessionBook[sessionId].turnOf = ~ds.sessionBook[sessionId].turnOf & 0x1;\\n        ds.sessionBook[sessionId].moveCount++;\\n        bool isFinalMove = gameEngine.checkIsFinalMove(_move);\\n        if(isFinalMove) {\\n            ds.sessionBook[sessionId].finalStep = true;\\n            ds.sessionBook[sessionId].canPlay = false;\\n        }else {\\n            ds.sessionCurrMove[sessionId] = _move;\\n        }\\n        ds.sessionCurrMove[sessionId].player = msg.sender;\\n\\n        emit MoveSubmitted(sessionId, ds.sessionCurrMove[sessionId], msg.sender, isFinalMove);\\n    }\\n\\n    /**\\n     * @dev submits a combination to be verified with the initial hashed combination\\n     * @param sessionId - the index of the session\\n     * @param key - the key the user used to submit when joined the game\\n     * @param combination - the combination submitted when joined the game\\n     */\\n    function submitCombitation(uint256 sessionId, string memory key, bytes memory combination) external {\\n        LibSmartBet.SmartBetStorage storage ds = LibSmartBet.smartBetStorage();\\n        require(ds.sessionBook[sessionId].finalStep,\\\"SmartBet : havent reached the final step\\\");\\n        bytes32 combinationHash = keccak256(abi.encodePacked(key,combination));\\n        // TODO : improve using mapping\\n        uint256 index;\\n        for(uint256 i;i<ds.sessionBook[sessionId].players.length;i++){\\n            if(ds.sessionBook[sessionId].players[i] == msg.sender){\\n                index = i;\\n            }\\n        }\\n        require(ds.sessionBook[sessionId].combinationHashes[index] == combinationHash, \\\"SmartBet : Combination and key dont match\\\");\\n        ds.combinationBook[sessionId].push(LibSmartBet.Combination(msg.sender,combination));\\n        emit CombinationSumitted(sessionId, msg.sender, combination);\\n        // check if combinations are met \\n        if(ds.sessionBook[sessionId].players.length == ds.combinationBook[sessionId].length){\\n            _endSession(sessionId, ds.combinationBook[sessionId], ds.sessionCurrMove[sessionId].player,ds.sessionCurrMove[sessionId]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Finalizes session after all combinations have been submitted\\n     * @param sessionId - the index of the session\\n     * @param combinations - the list of combinations of this game\\n     * @param endCaller - the user who claims the previous move/state ends the game\\n     * @param lastMove - the previous/last move/state\\n     */\\n    function _endSession(uint256 sessionId,LibSmartBet.Combination[] memory combinations, address endCaller, LibSmartBet.Move memory lastMove ) internal {\\n        LibSmartBet.SmartBetStorage storage ds = LibSmartBet.smartBetStorage();\\n        ds.sessionBook[sessionId].isActive = false;\\n        address winner = IGameEngine(ds.gameEngine).getWinner(combinations,lastMove,endCaller);\\n        ds.sessionBook[sessionId].winner = winner;\\n        IMockERC1155(ds.gameBook[ds.sessionBook[sessionId].gameId].tokenAddr).mint(winner,0,1,\\\"0x0\\\");\\n        emit SessionEnded(sessionId, winner);\\n    }\\n\\n    /**\\n     * @dev Owner can set the game engine Addr\\n     * @param gameEngineAddr - \\n     */\\n    function setGameEngine(address gameEngineAddr) external {\\n        _onlyOwner();\\n        LibSmartBet.smartBetStorage().gameEngine = gameEngineAddr;\\n    }\\n    function getGameEngine() external view returns (address) {\\n        return LibSmartBet.smartBetStorage().gameEngine;\\n    }\\n    function getGameInfo (uint256 gameId) public view returns (LibSmartBet.Game memory){\\n        return LibSmartBet.smartBetStorage().gameBook[gameId];\\n    }\\n\\n    //delete function\\n    function compare(bytes32 _inputHash, string memory key, uint256[] calldata combination) external pure returns (bool){\\n        bytes32 hash = keccak256(abi.encodePacked(key,combination));\\n        return(hash == _inputHash);\\n    }\\n    function getSessionInfo(uint256 sessionId) public view returns(LibSmartBet.Session memory session, LibSmartBet.Combination[] memory combinations, LibSmartBet.Move memory currMove){\\n        LibSmartBet.SmartBetStorage storage ds = LibSmartBet.smartBetStorage();\\n        session = ds.sessionBook[sessionId];\\n        combinations = ds.combinationBook[sessionId];\\n        currMove = ds.sessionCurrMove[sessionId];\\n    }\\n    function getAllSessionsInfo() external view returns (LibSmartBet.Session[] memory sessions){\\n        LibSmartBet.SmartBetStorage storage ds = LibSmartBet.smartBetStorage();\\n        sessions = new LibSmartBet.Session[](ds.sessionCount);\\n        for(uint256 i=1; i<=ds.sessionCount; i++){\\n            (sessions[i-1],,) = getSessionInfo(i);\\n        }\\n    }\\n    function getAllGamesInfo() external view returns (LibSmartBet.Game[] memory games){\\n        LibSmartBet.SmartBetStorage storage ds = LibSmartBet.smartBetStorage();\\n        games = new LibSmartBet.Game[](ds.gameCount);\\n        for(uint256 i=1; i<=ds.gameCount; i++){\\n            games[i-1] = getGameInfo(i);\\n        }\\n    }\\n}\",\"keccak256\":\"0x86903833e21f037cce8dd2bf6d3537913ff158c08a55c6cfe3b02594b14898e4\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n// Adapted from the Diamond 3 reference implementation by Nick Mudge:\\n// https://github.com/mudgen/diamond-3-hardhat\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\\n\",\"keccak256\":\"0x160f1f030992ebaa0903d09ae38d588ed6cabdf872857d70cd0ee8e590501cae\",\"license\":\"MIT\"},\"contracts/interfaces/IGameEngine.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport {LibSmartBet} from \\\"../libraries/LibSmartBet.sol\\\";\\ninterface IGameEngine {\\n    function checkIsValidMove(LibSmartBet.Move memory,LibSmartBet.Move memory) external view returns (bool);\\n    function checkIsFinalMove(LibSmartBet.Move memory) external view returns (bool);\\n    function getWinner(LibSmartBet.Combination[] memory, LibSmartBet.Move memory, address) external view returns (address);\\n}\",\"keccak256\":\"0x97fabceb7057145b38643b654c2e2da1609f647cab57a8803e0c5dc0dee63bd7\"},\"contracts/interfaces/IMockERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n///@notice This contract is for mock for WETH token.\\npragma solidity ^0.8.17;\\n\\ninterface IMockERC1155 {\\n    function mint(address, uint256, uint256, bytes memory) external;\\n    function mintBatch(address, uint256[] memory, uint256[] memory) external;\\n}\\n\",\"keccak256\":\"0xa7321af03b23517d9e58778b73eb6f60628cb925afddd6a849753b83796c2ee3\",\"license\":\"UNLICENSED\"},\"contracts/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n// Adapted from the Diamond 3 reference implementation by Nick Mudge:\\n// https://github.com/mudgen/diamond-3-hardhat\\n\\nimport {IDiamondCut} from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nerror InitializationFunctionReverted(\\n    address _initializationContractAddress,\\n    bytes _calldata\\n);\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(\\n            msg.sender == diamondStorage().contractOwner,\\n            \\\"LibDiamond: Must be contract owner\\\"\\n        );\\n    }\\n\\n    event DiamondCut(\\n        IDiamondCut.FacetCut[] _diamondCut,\\n        address _init,\\n        bytes _calldata\\n    );\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (\\n            uint256 facetIndex;\\n            facetIndex < _diamondCut.length;\\n            facetIndex++\\n        ) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(\\n                    _diamondCut[facetIndex].facetAddress,\\n                    _diamondCut[facetIndex].functionSelectors\\n                );\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        DiamondStorage storage ds = diamondStorage();\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Add facet can't be address(0)\\\"\\n        );\\n        uint96 selectorPosition = uint96(\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\\n        );\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n            require(\\n                oldFacetAddress == address(0),\\n                \\\"LibDiamondCut: Can't add function that already exists\\\"\\n            );\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        DiamondStorage storage ds = diamondStorage();\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Add facet can't be address(0)\\\"\\n        );\\n        uint96 selectorPosition = uint96(\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors.length\\n        );\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n            require(\\n                oldFacetAddress != _facetAddress,\\n                \\\"LibDiamondCut: Can't replace function with same function\\\"\\n            );\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(\\n        address _facetAddress,\\n        bytes4[] memory _functionSelectors\\n    ) internal {\\n        require(\\n            _functionSelectors.length > 0,\\n            \\\"LibDiamondCut: No selectors in facet to cut\\\"\\n        );\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(\\n            _facetAddress == address(0),\\n            \\\"LibDiamondCut: Remove facet address must be address(0)\\\"\\n        );\\n        for (\\n            uint256 selectorIndex;\\n            selectorIndex < _functionSelectors.length;\\n            selectorIndex++\\n        ) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds\\n                .selectorToFacetAndPosition[selector]\\n                .facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress)\\n        internal\\n    {\\n        enforceHasContractCode(\\n            _facetAddress,\\n            \\\"LibDiamondCut: New facet has no code\\\"\\n        );\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds\\n            .facetAddresses\\n            .length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }\\n\\n    function addFunction(\\n        DiamondStorage storage ds,\\n        bytes4 _selector,\\n        uint96 _selectorPosition,\\n        address _facetAddress\\n    ) internal {\\n        ds\\n            .selectorToFacetAndPosition[_selector]\\n            .functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(\\n            _selector\\n        );\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(\\n        DiamondStorage storage ds,\\n        address _facetAddress,\\n        bytes4 _selector\\n    ) internal {\\n        require(\\n            _facetAddress != address(0),\\n            \\\"LibDiamondCut: Can't remove function that doesn't exist\\\"\\n        );\\n        // an immutable function is a function defined directly in a diamond\\n        require(\\n            _facetAddress != address(this),\\n            \\\"LibDiamondCut: Can't remove immutable function\\\"\\n        );\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds\\n            .selectorToFacetAndPosition[_selector]\\n            .functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds\\n            .facetFunctionSelectors[_facetAddress]\\n            .functionSelectors\\n            .length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[\\n                    selectorPosition\\n                ] = lastSelector;\\n            ds\\n                .selectorToFacetAndPosition[lastSelector]\\n                .functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[\\n                    lastFacetAddressPosition\\n                ];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds\\n                    .facetFunctionSelectors[lastFacetAddress]\\n                    .facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds\\n                .facetFunctionSelectors[_facetAddress]\\n                .facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata)\\n        internal\\n    {\\n        if (_init == address(0)) {\\n            return;\\n        }\\n        enforceHasContractCode(\\n            _init,\\n            \\\"LibDiamondCut: _init address has no code\\\"\\n        );\\n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n        if (!success) {\\n            if (error.length > 0) {\\n                // bubble up error\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(error)\\n                    revert(add(32, error), returndata_size)\\n                }\\n            } else {\\n                revert InitializationFunctionReverted(_init, _calldata);\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(\\n        address _contract,\\n        string memory _errorMessage\\n    ) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x5e7556d8940d64176257f46cd0d16a2bbb83a5a033b89cc3376291d79195bbbc\",\"license\":\"MIT\"},\"contracts/libraries/LibSmartBet.sol\":{\"content\":\"pragma solidity ^0.8.17;\\n\\nlibrary LibSmartBet {\\n\\n    // customisable\\n    enum Moves{\\n        PlayMove, //  a normal move\\n        FinalMove, // a move that calls the checker\\n        FirstMove //  a first move ( skips some checkers )\\n    }\\n    bytes32 constant STORAGE_POSITION = keccak256(\\\"g7dao.eth.storage.SmartBet\\\");\\n    \\n\\n    struct Game {\\n        address tokenAddr; // address of the 1155 to mint to the winner\\n        uint256 validUntil; // deadline for members of the DAO to play the game\\n        uint256[] rules; // list of rules the game is based on\\n        string cid; // CID of the ipfs proposal we want to share\\n    }\\n    struct Combination {\\n        address player; // the playet to whom this combination belongs\\n        bytes combinationData;  // combination data is customizable i.e. (uint256[])\\n    }\\n    struct Session {\\n        address[] players; // list of players in the session\\n        bytes32[] combinationHashes; // list of inital combinations\\n        uint256 turnOf; //index of the player who plays now\\n        bool canPlay; //whether the game can be started\\n        uint256 gameId; // id of the game this is playing for \\n        bool finalStep; // whether this is the final step , will require you to submit combinations \\n        bool isActive; // will be inactive after the session was closed\\n        address winner; // the winner of the closed session\\n        uint256 moveCount;\\n    }\\n    struct Move {\\n        bytes moveData; // move data is customizable i.e. (uint256, uint256)\\n        Moves moveType; // type of the move\\n        address player; // player that executes a move\\n    }\\n    struct SmartBetStorage {\\n        address movesRegistry; // contract containing a list of declared / available moves\\n        address gameEngine; // contract containing the logic to choose the winner of the game\\n        uint256 gameCount; // keeps track of the number of games\\n        uint256 sessionCount; // keeps track of the number of sessions\\n\\n        //      gameId             addr      yes/no\\n        mapping(uint256 => mapping(address => bool)) hasPlayedGame; // tracks weather a player has played the game\\n\\n        //      sessionId   CombinationData\\n        mapping(uint256 => Combination[]) combinationBook; // combinations of the players of each session\\n\\n        //      gameId     gameData\\n        mapping(uint256 => Game) gameBook; // list of games in the contract\\n\\n        //      sessionId    SessionData \\n        mapping(uint256  => Session) sessionBook; // list of sessions in the contract\\n\\n        //      sessionId  Move\\n        mapping(uint256 => Move) sessionCurrMove; // tracks the current move of a session\\n    }\\n\\n    function smartBetStorage()\\n        internal\\n        pure\\n        returns (SmartBetStorage storage ds)\\n    {\\n        bytes32 position = STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n}\",\"keccak256\":\"0x069094218c008fb40e2c0af6c1da9dc627c705f6ee0c588073c845b2eb3a49d3\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612925806100206000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063503710951161007157806350371095146101555780635a9032ef146101685780639e10acf01461017b5780639f6136001461019d578063b131788b146101b2578063d878c3b7146101da57600080fd5b8063010c3a6f146100b9578063176765af146100d757806318db70b0146100ec5780631f31aeab146100ff5780632879958d1461012257806347e1d55014610135575b600080fd5b6100c16101ed565b6040516100ce9190611c6e565b60405180910390f35b6100ea6100e5366004611d34565b6102f8565b005b6100ea6100fa366004611dec565b6104e6565b61011261010d366004611eda565b61060a565b60405190151581526020016100ce565b6100ea610130366004611dec565b610648565b610148610143366004611f4a565b610884565b6040516100ce9190611f63565b6100ea610163366004611f7d565b6109f4565b6100ea610176366004611f9a565b610a2b565b61018e610189366004611f4a565b610eff565b6040516100ce93929190612256565b6101a561128a565b6040516100ce9190612299565b600080516020612890833981519152546040516001600160a01b0390911681526020016100ce565b6100ea6101e83660046122ee565b611367565b7f4a1d34b57ee9b41a098267d808770b616a3c2104efb03f483948529b427ea20b546060906000805160206128b08339815191529067ffffffffffffffff81111561023a5761023a611e0e565b60405190808252806020026020018201604052801561029f57816020015b61028c604051806080016040528060006001600160a01b031681526020016000815260200160608152602001606081525090565b8152602001906001900390816102585790505b50915060015b816002015481116102f3576102b981610884565b836102c5600184612371565b815181106102d5576102d561238a565b602002602001018190525080806102eb906123a0565b9150506102a5565b505090565b846103066203f480426123b9565b106103585760405162461bcd60e51b815260206004820152601f60248201527f536d617274426574203a20456e642074696d6520697320746f6f20736f6f6e0060448201526064015b60405180910390fd5b60006040518060800160405280886001600160a01b03168152602001878152602001868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250505090825250604080516020601f87018190048102820181019092528581529181019190869086908190840183828082843760009201829052509390945250507f4a1d34b57ee9b41a098267d808770b616a3c2104efb03f483948529b427ea20b80549394506000805160206128b08339815191529392509061042c836123a0565b90915550506002818101546000908152600683016020908152604091829020855181546001600160a01b0319166001600160a01b03909116178155858201516001820155918501518051869461048793908501920190611a8d565b506060820151600382019061049c9082612451565b50505060028101546040517f2f5c038295c6c3e8c305dcf8e9bb7bb3f819a8bd870c197e099de127aa1cec4d916104d4918590612511565b60405180910390a15050505050505050565b60008281526000805160206128d08339815191526020818152604080842080546001808201835582875284872090910180546001600160a01b031916339081179091557f4a1d34b57ee9b41a098267d808770b616a3c2104efb03f483948529b427ea20c54875283872082018054808401825590885285882001889055600483015487527f4a1d34b57ee9b41a098267d808770b616a3c2104efb03f483948529b427ea20d85528387208188528552838720805460ff199081168417909155968990529490935260038101805490951690921790935591516000805160206128b0833981519152927f518987a8adb2624b1130e20bdd6bdd3bb41e0697685310875e4a25eda15d908a926105fd928792919061259d565b60405180910390a1505050565b60008084848460405160200161062293929190612651565b60408051601f19818403018152919052805160209091012086149150505b949350505050565b60008281527f4a1d34b57ee9b41a098267d808770b616a3c2104efb03f483948529b427ea20d602090815260408083203384529091528120805460ff191660011790557f4a1d34b57ee9b41a098267d808770b616a3c2104efb03f483948529b427ea20c80546000805160206128b0833981519152926060928392916106cd836123a0565b9091555050604080516101208101825283815260208082018490526000828401819052606083018190526080830189905260a08301819052600160c084015260e083018190526101008301819052600387015481526007870182529290922081518051929391926107419284920190611ad8565b50602082810151805161075a9260018501920190611a8d565b50604082810151600283015560608301516003808401805460ff1916921515929092179091556080840151600484015560a084015160058401805460c087015160e088015161ffff1990921693151561ff0019169390931761010093151584021762010000600160b01b031916620100006001600160a01b03909216919091021790559093015160069092019190915590840180546000908152600786016020908152838220805460018181018355918452828420018054336001600160a01b031990911681179091558454845285842082018054928301815584529183200188905591548082529083902092517f8662591d7160080df1415bd48bafc70f49a1d344ceb0e18d63e0286a27f95b839361087593909161259d565b60405180910390a15050505050565b6108b8604051806080016040528060006001600160a01b031681526020016000815260200160608152602001606081525090565b60008281527f4a1d34b57ee9b41a098267d808770b616a3c2104efb03f483948529b427ea20f6020908152604091829020825160808101845281546001600160a01b031681526001820154818401526002820180548551818602810186018752818152929593949386019383018282801561095257602002820191906000526020600020905b81548152602001906001019080831161093e575b5050505050815260200160038201805461096b906123cc565b80601f0160208091040260200160405190810160405280929190818152602001828054610997906123cc565b80156109e45780601f106109b9576101008083540402835291602001916109e4565b820191906000526020600020905b8154815290600101906020018083116109c757829003601f168201915b5050505050815250509050919050565b6109fc611817565b60008051602061289083398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b60008181526000805160206128d0833981519152602090815260408083208151815493840281016101409081019093526101208101848152869594919384928491840182828015610aa557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610a87575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015610afd57602002820191906000526020600020905b815481526020019060010190808311610ae9575b505050918352505060028201546020820152600382015460ff9081161515604080840191909152600484015460608401526005840154808316151560808501526101008104909216151560a0840152620100009091046001600160a01b031660c083015260069092015460e090910152815190820151815192935033928110610b8857610b8861238a565b60200260200101516001600160a01b031614610bdf5760405162461bcd60e51b81526020600482015260166024820152753737ba103a3ab9371037b3103a34329039b2b73232b960511b604482015260640161034f565b8060600151610c285760405162461bcd60e51b81526020600482015260156024820152741cd95cdcda5bdb881a185cdb9d081cdd185c9d1959605a1b604482015260640161034f565b6000805160206128908339815191525460008481527f4a1d34b57ee9b41a098267d808770b616a3c2104efb03f483948529b427ea211602052604090819020905163b46ffe5760e01b81526000805160206128b0833981519152926001600160a01b031691829163b46ffe5791610ca3918a9060040161273e565b602060405180830381865afa158015610cc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce4919061276c565b610d305760405162461bcd60e51b815260206004820152601960248201527f536d617274426574203a204d6f7665206e6f742076616c696400000000000000604482015260640161034f565b60008581526007830160205260408120600281018054196001169055600601805491610d5b836123a0565b9091555050604051634c58bffd60e01b81526000906001600160a01b03831690634c58bffd90610d8f908a9060040161278e565b602060405180830381865afa158015610dac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd0919061276c565b90508015610e0b576000868152600784016020526040902060058101805460ff19908116600117909155600390910180549091169055610e8a565b6000868152600884016020526040902087518891908190610e2c9082612451565b50602082015160018083018054909160ff1990911690836002811115610e5457610e546121d8565b021790555060409190910151600190910180546001600160a01b0390921661010002610100600160a81b03199092169190911790555b600086815260088401602052604090819020600181018054610100600160a81b0319163361010081029190911790915591517f8ad21582cc538fe91ce4fbcc5738c753b1c146825552658e46b02de0153601eb92610eee928a9290919086906127a1565b60405180910390a150505050505050565b610f07611b2d565b60408051606081810183528082526000602083018190529282019290925260008481526000805160206128d08339815191526020908152604091829020825181546101409381028201840190945261012081018481526000805160206128b083398151915294919384928491840182828015610fac57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610f8e575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561100457602002820191906000526020600020905b815481526020019060010190808311610ff0575b50505091835250506002820154602080830191909152600383015460ff908116151560408085019190915260048501546060850152600580860154808416151560808701526101008104909316151560a0860152620100009092046001600160a01b031660c085015260069094015460e0909301929092526000898152918501815282822080548451818402810184019095528085529498509293919084015b8282101561117d576000848152602090819020604080518082019091526002850290910180546001600160a01b0316825260018101805492939192918401916110ec906123cc565b80601f0160208091040260200160405190810160405280929190818152602001828054611118906123cc565b80156111655780601f1061113a57610100808354040283529160200191611165565b820191906000526020600020905b81548152906001019060200180831161114857829003601f168201915b505050505081525050815260200190600101906110a4565b5050505092508060080160008681526020019081526020016000206040518060600160405290816000820180546111b3906123cc565b80601f01602080910402602001604051908101604052809291908181526020018280546111df906123cc565b801561122c5780601f106112015761010080835404028352916020019161122c565b820191906000526020600020905b81548152906001019060200180831161120f57829003601f168201915b5050509183525050600182015460209091019060ff166002811115611253576112536121d8565b6002811115611264576112646121d8565b81526001919091015461010090046001600160a01b031660209091015293959294505050565b7f4a1d34b57ee9b41a098267d808770b616a3c2104efb03f483948529b427ea20c546060906000805160206128b08339815191529067ffffffffffffffff8111156112d7576112d7611e0e565b60405190808252806020026020018201604052801561131057816020015b6112fd611b2d565b8152602001906001900390816112f55790505b50915060015b816003015481116102f35761132a81610eff565b50849050611339600184612371565b815181106113495761134961238a565b6020026020010181905250808061135f906123a0565b915050611316565b60008381526000805160206128d083398151915260205260409020600501546000805160206128b08339815191529060ff166113f65760405162461bcd60e51b815260206004820152602860248201527f536d617274426574203a20686176656e7420726561636865642074686520666960448201526706e616c20737465760c41b606482015260840161034f565b6000838360405160200161140b9291906127db565b6040516020818303038152906040528051906020012090506000805b600087815260078501602052604090205481101561149457600087815260078501602052604090208054339190839081106114645761146461238a565b6000918252602090912001546001600160a01b031603611482578091505b8061148c816123a0565b915050611427565b50600086815260078401602052604090206001018054839190839081106114bd576114bd61238a565b9060005260206000200154146115275760405162461bcd60e51b815260206004820152602960248201527f536d617274426574203a20436f6d62696e6174696f6e20616e64206b657920646044820152680dedce840dac2e8c6d60bb1b606482015260840161034f565b60008681526005840160209081526040808320815180830190925233825281830188815281546001808201845592865293909420825160029094020180546001600160a01b0319166001600160a01b03909416939093178355925190928201906115919082612451565b5050507f6be290b56a34b6881fc9b4428fed982f57eb0dd071c54045f02517f436f21ed28633866040516115c79392919061280a565b60405180910390a1600086815260058401602090815260408083205460078701909252909120540361180f5760008681526005840160209081526040808320805482518185028101850190935280835261180f948b9484015b828210156116f9576000848152602090819020604080518082019091526002850290910180546001600160a01b031682526001810180549293919291840191611668906123cc565b80601f0160208091040260200160405190810160405280929190818152602001828054611694906123cc565b80156116e15780601f106116b6576101008083540402835291602001916116e1565b820191906000526020600020905b8154815290600101906020018083116116c457829003601f168201915b50505050508152505081526020019060010190611620565b50505060008a815260088801602052604090819020600181015482516060810190935281546101009091046001600160a01b031693508290829061173c906123cc565b80601f0160208091040260200160405190810160405280929190818152602001828054611768906123cc565b80156117b55780601f1061178a576101008083540402835291602001916117b5565b820191906000526020600020905b81548152906001019060200180831161179857829003601f168201915b5050509183525050600182015460209091019060ff1660028111156117dc576117dc6121d8565b60028111156117ed576117ed6121d8565b81526001919091015461010090046001600160a01b03166020909101526118be565b505050505050565b336118497fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320546001600160a01b031690565b6001600160a01b0316146118bc5760405162461bcd60e51b815260206004820152603460248201527f536d6172744265744661636574203a2046756e6374696f6e2063616e206f6e6c6044820152733c9031329031b0b63632b210313c9037bbb732b960611b606482015260840161034f565b565b60008481526000805160206128d08339815191526020526040808220600501805461ff0019169055600080516020612890833981519152549051636251586360e11b81526000805160206128b083398151915292916001600160a01b03169063c4a2b0c69061193590889087908990600401612834565b602060405180830381865afa158015611952573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119769190612872565b6000878152600784016020908152604080832060058101805462010000600160b01b031916620100006001600160a01b038881169182029290921790925560049283015486526006890190945282852054925163731133e960e01b81529182015260248101939093526001604484015260806064840152600360848401526203078360ec1b60a4840152929350919091169063731133e99060c401600060405180830381600087803b158015611a2b57600080fd5b505af1158015611a3f573d6000803e3d6000fd5b5050604080518981526001600160a01b03851660208201527f6675689853001ccde8302307860cb6de8041a4e27ef13c6b57c400db5ccc53b5935001905060405180910390a1505050505050565b828054828255906000526020600020908101928215611ac8579160200282015b82811115611ac8578251825591602001919060010190611aad565b50611ad4929150611b88565b5090565b828054828255906000526020600020908101928215611ac8579160200282015b82811115611ac857825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611af8565b6040518061012001604052806060815260200160608152602001600081526020016000151581526020016000815260200160001515815260200160001515815260200160006001600160a01b03168152602001600081525090565b5b80821115611ad45760008155600101611b89565b60005b83811015611bb8578181015183820152602001611ba0565b50506000910152565b60008151808452611bd9816020860160208601611b9d565b601f01601f19169290920160200192915050565b80516001600160a01b03168252602080820151818401526040808301516080918501829052805191850182905260009290810191839060a08701905b80831015611c495784518252938301936001929092019190830190611c29565b50606086015193508681036060880152611c638185611bc1565b979650505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611cc357603f19888603018452611cb1858351611bed565b94509285019290850190600101611c95565b5092979650505050505050565b6001600160a01b0381168114611ce557600080fd5b50565b60008083601f840112611cfa57600080fd5b50813567ffffffffffffffff811115611d1257600080fd5b6020830191508360208260051b8501011115611d2d57600080fd5b9250929050565b60008060008060008060808789031215611d4d57600080fd5b8635611d5881611cd0565b955060208701359450604087013567ffffffffffffffff80821115611d7c57600080fd5b611d888a838b01611ce8565b90965094506060890135915080821115611da157600080fd5b818901915089601f830112611db557600080fd5b813581811115611dc457600080fd5b8a6020828501011115611dd657600080fd5b6020830194508093505050509295509295509295565b60008060408385031215611dff57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715611e4757611e47611e0e565b60405290565b600082601f830112611e5e57600080fd5b813567ffffffffffffffff80821115611e7957611e79611e0e565b604051601f8301601f19908116603f01168101908282118183101715611ea157611ea1611e0e565b81604052838152866020858801011115611eba57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060608587031215611ef057600080fd5b84359350602085013567ffffffffffffffff80821115611f0f57600080fd5b611f1b88838901611e4d565b94506040870135915080821115611f3157600080fd5b50611f3e87828801611ce8565b95989497509550505050565b600060208284031215611f5c57600080fd5b5035919050565b602081526000611f766020830184611bed565b9392505050565b600060208284031215611f8f57600080fd5b8135611f7681611cd0565b60008060408385031215611fad57600080fd5b823567ffffffffffffffff80821115611fc557600080fd5b9084019060608287031215611fd957600080fd5b611fe1611e24565b823582811115611ff057600080fd5b611ffc88828601611e4d565b825250602083013591506003821061201357600080fd5b8160208201526040830135925061202983611cd0565b604081019290925250946020939093013593505050565b600081518084526020808501945080840160005b838110156120795781516001600160a01b031687529582019590820190600101612054565b509495945050505050565b600081518084526020808501945080840160005b8381101561207957815187529582019590820190600101612098565b600061012082518185526120ca82860182612040565b915050602083015184820360208601526120e48282612084565b915050604083015160408501526060830151612104606086018215159052565b506080830151608085015260a083015161212260a086018215159052565b5060c083015161213660c086018215159052565b5060e083015161215160e08601826001600160a01b03169052565b50610100928301519390920192909252919050565b600081518084526020808501808196508360051b8101915082860160005b858110156121cb578284038952815180516001600160a01b0316855285015160408686018190526121b781870183611bc1565b9a87019a9550505090840190600101612184565b5091979650505050505050565b634e487b7160e01b600052602160045260246000fd5b6003811061220c57634e487b7160e01b600052602160045260246000fd5b9052565b60008151606084526122256060850182611bc1565b9050602083015161223960208601826121ee565b506040928301516001600160a01b03169390920192909252919050565b60608152600061226960608301866120b4565b828103602084015261227b8186612166565b9050828103604084015261228f8185612210565b9695505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611cc357603f198886030184526122dc8583516120b4565b945092850192908501906001016122c0565b60008060006060848603121561230357600080fd5b83359250602084013567ffffffffffffffff8082111561232257600080fd5b61232e87838801611e4d565b9350604086013591508082111561234457600080fd5b5061235186828701611e4d565b9150509250925092565b634e487b7160e01b600052601160045260246000fd5b818103818111156123845761238461235b565b92915050565b634e487b7160e01b600052603260045260246000fd5b6000600182016123b2576123b261235b565b5060010190565b808201808211156123845761238461235b565b600181811c908216806123e057607f821691505b60208210810361240057634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561244c57600081815260208120601f850160051c8101602086101561242d5750805b601f850160051c820191505b8181101561180f57828155600101612439565b505050565b815167ffffffffffffffff81111561246b5761246b611e0e565b61247f8161247984546123cc565b84612406565b602080601f8311600181146124b4576000841561249c5750858301515b600019600386901b1c1916600185901b17855561180f565b600085815260208120601f198616915b828110156124e3578886015182559484019460019091019084016124c4565b50858210156125015787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8281526040602082015260006106406040830184611bed565b6000815480845260208085019450836000528060002060005b838110156120795781546001600160a01b031687529582019560019182019101612543565b6000815480845260208085019450836000528060002060005b8381101561207957815487529582019560019182019101612581565b8381526060602082015260006101208060608401526125c061018084018661252a565b838103605f190160808501526125d98160018801612568565b9050600286015460a08501526125f3600387015460ff1690565b151560c0850152600486015460e0850152600586015460ff8082161515610100870152600882901c1615158386015260101c6001600160a01b0390811661014086015260068701546101608601528516604085015291506106409050565b60008451612663818460208901611b9d565b82016001600160fb1b0384111561267957600080fd5b8360051b808683370195945050505050565b60608252600080825461269d816123cc565b80606087015260806001808416600081146126bf57600181146126d95761270a565b60ff1985168984015283151560051b89018301955061270a565b8760005260208060002060005b868110156127015781548c82018701529084019082016126e6565b8b018501975050505b5086015492506127239150506020860160ff83166121ee565b6001600160a01b03600882901c166040860152509392505050565b604081526000612751604083018561268b565b82810360208401526127638185612210565b95945050505050565b60006020828403121561277e57600080fd5b81518015158114611f7657600080fd5b602081526000611f766020830184612210565b8481526080602082015260006127ba608083018661268b565b6001600160a01b039490941660408301525090151560609091015292915050565b600083516127ed818460208801611b9d565b835190830190612801818360208801611b9d565b01949350505050565b8381526001600160a01b038316602082015260606040820181905260009061276390830184611bc1565b6060815260006128476060830186612166565b82810360208401526128598186612210565b91505060018060a01b0383166040830152949350505050565b60006020828403121561288457600080fd5b8151611f7681611cd056fe4a1d34b57ee9b41a098267d808770b616a3c2104efb03f483948529b427ea20a4a1d34b57ee9b41a098267d808770b616a3c2104efb03f483948529b427ea2094a1d34b57ee9b41a098267d808770b616a3c2104efb03f483948529b427ea210a264697066735822122045c9709edabee82b0202781cbf4e390c55b4485cc2b1308ed6d1d3e1d62357b964736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c8063503710951161007157806350371095146101555780635a9032ef146101685780639e10acf01461017b5780639f6136001461019d578063b131788b146101b2578063d878c3b7146101da57600080fd5b8063010c3a6f146100b9578063176765af146100d757806318db70b0146100ec5780631f31aeab146100ff5780632879958d1461012257806347e1d55014610135575b600080fd5b6100c16101ed565b6040516100ce9190611c6e565b60405180910390f35b6100ea6100e5366004611d34565b6102f8565b005b6100ea6100fa366004611dec565b6104e6565b61011261010d366004611eda565b61060a565b60405190151581526020016100ce565b6100ea610130366004611dec565b610648565b610148610143366004611f4a565b610884565b6040516100ce9190611f63565b6100ea610163366004611f7d565b6109f4565b6100ea610176366004611f9a565b610a2b565b61018e610189366004611f4a565b610eff565b6040516100ce93929190612256565b6101a561128a565b6040516100ce9190612299565b600080516020612890833981519152546040516001600160a01b0390911681526020016100ce565b6100ea6101e83660046122ee565b611367565b7f4a1d34b57ee9b41a098267d808770b616a3c2104efb03f483948529b427ea20b546060906000805160206128b08339815191529067ffffffffffffffff81111561023a5761023a611e0e565b60405190808252806020026020018201604052801561029f57816020015b61028c604051806080016040528060006001600160a01b031681526020016000815260200160608152602001606081525090565b8152602001906001900390816102585790505b50915060015b816002015481116102f3576102b981610884565b836102c5600184612371565b815181106102d5576102d561238a565b602002602001018190525080806102eb906123a0565b9150506102a5565b505090565b846103066203f480426123b9565b106103585760405162461bcd60e51b815260206004820152601f60248201527f536d617274426574203a20456e642074696d6520697320746f6f20736f6f6e0060448201526064015b60405180910390fd5b60006040518060800160405280886001600160a01b03168152602001878152602001868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250505090825250604080516020601f87018190048102820181019092528581529181019190869086908190840183828082843760009201829052509390945250507f4a1d34b57ee9b41a098267d808770b616a3c2104efb03f483948529b427ea20b80549394506000805160206128b08339815191529392509061042c836123a0565b90915550506002818101546000908152600683016020908152604091829020855181546001600160a01b0319166001600160a01b03909116178155858201516001820155918501518051869461048793908501920190611a8d565b506060820151600382019061049c9082612451565b50505060028101546040517f2f5c038295c6c3e8c305dcf8e9bb7bb3f819a8bd870c197e099de127aa1cec4d916104d4918590612511565b60405180910390a15050505050505050565b60008281526000805160206128d08339815191526020818152604080842080546001808201835582875284872090910180546001600160a01b031916339081179091557f4a1d34b57ee9b41a098267d808770b616a3c2104efb03f483948529b427ea20c54875283872082018054808401825590885285882001889055600483015487527f4a1d34b57ee9b41a098267d808770b616a3c2104efb03f483948529b427ea20d85528387208188528552838720805460ff199081168417909155968990529490935260038101805490951690921790935591516000805160206128b0833981519152927f518987a8adb2624b1130e20bdd6bdd3bb41e0697685310875e4a25eda15d908a926105fd928792919061259d565b60405180910390a1505050565b60008084848460405160200161062293929190612651565b60408051601f19818403018152919052805160209091012086149150505b949350505050565b60008281527f4a1d34b57ee9b41a098267d808770b616a3c2104efb03f483948529b427ea20d602090815260408083203384529091528120805460ff191660011790557f4a1d34b57ee9b41a098267d808770b616a3c2104efb03f483948529b427ea20c80546000805160206128b0833981519152926060928392916106cd836123a0565b9091555050604080516101208101825283815260208082018490526000828401819052606083018190526080830189905260a08301819052600160c084015260e083018190526101008301819052600387015481526007870182529290922081518051929391926107419284920190611ad8565b50602082810151805161075a9260018501920190611a8d565b50604082810151600283015560608301516003808401805460ff1916921515929092179091556080840151600484015560a084015160058401805460c087015160e088015161ffff1990921693151561ff0019169390931761010093151584021762010000600160b01b031916620100006001600160a01b03909216919091021790559093015160069092019190915590840180546000908152600786016020908152838220805460018181018355918452828420018054336001600160a01b031990911681179091558454845285842082018054928301815584529183200188905591548082529083902092517f8662591d7160080df1415bd48bafc70f49a1d344ceb0e18d63e0286a27f95b839361087593909161259d565b60405180910390a15050505050565b6108b8604051806080016040528060006001600160a01b031681526020016000815260200160608152602001606081525090565b60008281527f4a1d34b57ee9b41a098267d808770b616a3c2104efb03f483948529b427ea20f6020908152604091829020825160808101845281546001600160a01b031681526001820154818401526002820180548551818602810186018752818152929593949386019383018282801561095257602002820191906000526020600020905b81548152602001906001019080831161093e575b5050505050815260200160038201805461096b906123cc565b80601f0160208091040260200160405190810160405280929190818152602001828054610997906123cc565b80156109e45780601f106109b9576101008083540402835291602001916109e4565b820191906000526020600020905b8154815290600101906020018083116109c757829003601f168201915b5050505050815250509050919050565b6109fc611817565b60008051602061289083398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b60008181526000805160206128d0833981519152602090815260408083208151815493840281016101409081019093526101208101848152869594919384928491840182828015610aa557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610a87575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015610afd57602002820191906000526020600020905b815481526020019060010190808311610ae9575b505050918352505060028201546020820152600382015460ff9081161515604080840191909152600484015460608401526005840154808316151560808501526101008104909216151560a0840152620100009091046001600160a01b031660c083015260069092015460e090910152815190820151815192935033928110610b8857610b8861238a565b60200260200101516001600160a01b031614610bdf5760405162461bcd60e51b81526020600482015260166024820152753737ba103a3ab9371037b3103a34329039b2b73232b960511b604482015260640161034f565b8060600151610c285760405162461bcd60e51b81526020600482015260156024820152741cd95cdcda5bdb881a185cdb9d081cdd185c9d1959605a1b604482015260640161034f565b6000805160206128908339815191525460008481527f4a1d34b57ee9b41a098267d808770b616a3c2104efb03f483948529b427ea211602052604090819020905163b46ffe5760e01b81526000805160206128b0833981519152926001600160a01b031691829163b46ffe5791610ca3918a9060040161273e565b602060405180830381865afa158015610cc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce4919061276c565b610d305760405162461bcd60e51b815260206004820152601960248201527f536d617274426574203a204d6f7665206e6f742076616c696400000000000000604482015260640161034f565b60008581526007830160205260408120600281018054196001169055600601805491610d5b836123a0565b9091555050604051634c58bffd60e01b81526000906001600160a01b03831690634c58bffd90610d8f908a9060040161278e565b602060405180830381865afa158015610dac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd0919061276c565b90508015610e0b576000868152600784016020526040902060058101805460ff19908116600117909155600390910180549091169055610e8a565b6000868152600884016020526040902087518891908190610e2c9082612451565b50602082015160018083018054909160ff1990911690836002811115610e5457610e546121d8565b021790555060409190910151600190910180546001600160a01b0390921661010002610100600160a81b03199092169190911790555b600086815260088401602052604090819020600181018054610100600160a81b0319163361010081029190911790915591517f8ad21582cc538fe91ce4fbcc5738c753b1c146825552658e46b02de0153601eb92610eee928a9290919086906127a1565b60405180910390a150505050505050565b610f07611b2d565b60408051606081810183528082526000602083018190529282019290925260008481526000805160206128d08339815191526020908152604091829020825181546101409381028201840190945261012081018481526000805160206128b083398151915294919384928491840182828015610fac57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610f8e575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561100457602002820191906000526020600020905b815481526020019060010190808311610ff0575b50505091835250506002820154602080830191909152600383015460ff908116151560408085019190915260048501546060850152600580860154808416151560808701526101008104909316151560a0860152620100009092046001600160a01b031660c085015260069094015460e0909301929092526000898152918501815282822080548451818402810184019095528085529498509293919084015b8282101561117d576000848152602090819020604080518082019091526002850290910180546001600160a01b0316825260018101805492939192918401916110ec906123cc565b80601f0160208091040260200160405190810160405280929190818152602001828054611118906123cc565b80156111655780601f1061113a57610100808354040283529160200191611165565b820191906000526020600020905b81548152906001019060200180831161114857829003601f168201915b505050505081525050815260200190600101906110a4565b5050505092508060080160008681526020019081526020016000206040518060600160405290816000820180546111b3906123cc565b80601f01602080910402602001604051908101604052809291908181526020018280546111df906123cc565b801561122c5780601f106112015761010080835404028352916020019161122c565b820191906000526020600020905b81548152906001019060200180831161120f57829003601f168201915b5050509183525050600182015460209091019060ff166002811115611253576112536121d8565b6002811115611264576112646121d8565b81526001919091015461010090046001600160a01b031660209091015293959294505050565b7f4a1d34b57ee9b41a098267d808770b616a3c2104efb03f483948529b427ea20c546060906000805160206128b08339815191529067ffffffffffffffff8111156112d7576112d7611e0e565b60405190808252806020026020018201604052801561131057816020015b6112fd611b2d565b8152602001906001900390816112f55790505b50915060015b816003015481116102f35761132a81610eff565b50849050611339600184612371565b815181106113495761134961238a565b6020026020010181905250808061135f906123a0565b915050611316565b60008381526000805160206128d083398151915260205260409020600501546000805160206128b08339815191529060ff166113f65760405162461bcd60e51b815260206004820152602860248201527f536d617274426574203a20686176656e7420726561636865642074686520666960448201526706e616c20737465760c41b606482015260840161034f565b6000838360405160200161140b9291906127db565b6040516020818303038152906040528051906020012090506000805b600087815260078501602052604090205481101561149457600087815260078501602052604090208054339190839081106114645761146461238a565b6000918252602090912001546001600160a01b031603611482578091505b8061148c816123a0565b915050611427565b50600086815260078401602052604090206001018054839190839081106114bd576114bd61238a565b9060005260206000200154146115275760405162461bcd60e51b815260206004820152602960248201527f536d617274426574203a20436f6d62696e6174696f6e20616e64206b657920646044820152680dedce840dac2e8c6d60bb1b606482015260840161034f565b60008681526005840160209081526040808320815180830190925233825281830188815281546001808201845592865293909420825160029094020180546001600160a01b0319166001600160a01b03909416939093178355925190928201906115919082612451565b5050507f6be290b56a34b6881fc9b4428fed982f57eb0dd071c54045f02517f436f21ed28633866040516115c79392919061280a565b60405180910390a1600086815260058401602090815260408083205460078701909252909120540361180f5760008681526005840160209081526040808320805482518185028101850190935280835261180f948b9484015b828210156116f9576000848152602090819020604080518082019091526002850290910180546001600160a01b031682526001810180549293919291840191611668906123cc565b80601f0160208091040260200160405190810160405280929190818152602001828054611694906123cc565b80156116e15780601f106116b6576101008083540402835291602001916116e1565b820191906000526020600020905b8154815290600101906020018083116116c457829003601f168201915b50505050508152505081526020019060010190611620565b50505060008a815260088801602052604090819020600181015482516060810190935281546101009091046001600160a01b031693508290829061173c906123cc565b80601f0160208091040260200160405190810160405280929190818152602001828054611768906123cc565b80156117b55780601f1061178a576101008083540402835291602001916117b5565b820191906000526020600020905b81548152906001019060200180831161179857829003601f168201915b5050509183525050600182015460209091019060ff1660028111156117dc576117dc6121d8565b60028111156117ed576117ed6121d8565b81526001919091015461010090046001600160a01b03166020909101526118be565b505050505050565b336118497fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320546001600160a01b031690565b6001600160a01b0316146118bc5760405162461bcd60e51b815260206004820152603460248201527f536d6172744265744661636574203a2046756e6374696f6e2063616e206f6e6c6044820152733c9031329031b0b63632b210313c9037bbb732b960611b606482015260840161034f565b565b60008481526000805160206128d08339815191526020526040808220600501805461ff0019169055600080516020612890833981519152549051636251586360e11b81526000805160206128b083398151915292916001600160a01b03169063c4a2b0c69061193590889087908990600401612834565b602060405180830381865afa158015611952573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119769190612872565b6000878152600784016020908152604080832060058101805462010000600160b01b031916620100006001600160a01b038881169182029290921790925560049283015486526006890190945282852054925163731133e960e01b81529182015260248101939093526001604484015260806064840152600360848401526203078360ec1b60a4840152929350919091169063731133e99060c401600060405180830381600087803b158015611a2b57600080fd5b505af1158015611a3f573d6000803e3d6000fd5b5050604080518981526001600160a01b03851660208201527f6675689853001ccde8302307860cb6de8041a4e27ef13c6b57c400db5ccc53b5935001905060405180910390a1505050505050565b828054828255906000526020600020908101928215611ac8579160200282015b82811115611ac8578251825591602001919060010190611aad565b50611ad4929150611b88565b5090565b828054828255906000526020600020908101928215611ac8579160200282015b82811115611ac857825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611af8565b6040518061012001604052806060815260200160608152602001600081526020016000151581526020016000815260200160001515815260200160001515815260200160006001600160a01b03168152602001600081525090565b5b80821115611ad45760008155600101611b89565b60005b83811015611bb8578181015183820152602001611ba0565b50506000910152565b60008151808452611bd9816020860160208601611b9d565b601f01601f19169290920160200192915050565b80516001600160a01b03168252602080820151818401526040808301516080918501829052805191850182905260009290810191839060a08701905b80831015611c495784518252938301936001929092019190830190611c29565b50606086015193508681036060880152611c638185611bc1565b979650505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611cc357603f19888603018452611cb1858351611bed565b94509285019290850190600101611c95565b5092979650505050505050565b6001600160a01b0381168114611ce557600080fd5b50565b60008083601f840112611cfa57600080fd5b50813567ffffffffffffffff811115611d1257600080fd5b6020830191508360208260051b8501011115611d2d57600080fd5b9250929050565b60008060008060008060808789031215611d4d57600080fd5b8635611d5881611cd0565b955060208701359450604087013567ffffffffffffffff80821115611d7c57600080fd5b611d888a838b01611ce8565b90965094506060890135915080821115611da157600080fd5b818901915089601f830112611db557600080fd5b813581811115611dc457600080fd5b8a6020828501011115611dd657600080fd5b6020830194508093505050509295509295509295565b60008060408385031215611dff57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715611e4757611e47611e0e565b60405290565b600082601f830112611e5e57600080fd5b813567ffffffffffffffff80821115611e7957611e79611e0e565b604051601f8301601f19908116603f01168101908282118183101715611ea157611ea1611e0e565b81604052838152866020858801011115611eba57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060608587031215611ef057600080fd5b84359350602085013567ffffffffffffffff80821115611f0f57600080fd5b611f1b88838901611e4d565b94506040870135915080821115611f3157600080fd5b50611f3e87828801611ce8565b95989497509550505050565b600060208284031215611f5c57600080fd5b5035919050565b602081526000611f766020830184611bed565b9392505050565b600060208284031215611f8f57600080fd5b8135611f7681611cd0565b60008060408385031215611fad57600080fd5b823567ffffffffffffffff80821115611fc557600080fd5b9084019060608287031215611fd957600080fd5b611fe1611e24565b823582811115611ff057600080fd5b611ffc88828601611e4d565b825250602083013591506003821061201357600080fd5b8160208201526040830135925061202983611cd0565b604081019290925250946020939093013593505050565b600081518084526020808501945080840160005b838110156120795781516001600160a01b031687529582019590820190600101612054565b509495945050505050565b600081518084526020808501945080840160005b8381101561207957815187529582019590820190600101612098565b600061012082518185526120ca82860182612040565b915050602083015184820360208601526120e48282612084565b915050604083015160408501526060830151612104606086018215159052565b506080830151608085015260a083015161212260a086018215159052565b5060c083015161213660c086018215159052565b5060e083015161215160e08601826001600160a01b03169052565b50610100928301519390920192909252919050565b600081518084526020808501808196508360051b8101915082860160005b858110156121cb578284038952815180516001600160a01b0316855285015160408686018190526121b781870183611bc1565b9a87019a9550505090840190600101612184565b5091979650505050505050565b634e487b7160e01b600052602160045260246000fd5b6003811061220c57634e487b7160e01b600052602160045260246000fd5b9052565b60008151606084526122256060850182611bc1565b9050602083015161223960208601826121ee565b506040928301516001600160a01b03169390920192909252919050565b60608152600061226960608301866120b4565b828103602084015261227b8186612166565b9050828103604084015261228f8185612210565b9695505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611cc357603f198886030184526122dc8583516120b4565b945092850192908501906001016122c0565b60008060006060848603121561230357600080fd5b83359250602084013567ffffffffffffffff8082111561232257600080fd5b61232e87838801611e4d565b9350604086013591508082111561234457600080fd5b5061235186828701611e4d565b9150509250925092565b634e487b7160e01b600052601160045260246000fd5b818103818111156123845761238461235b565b92915050565b634e487b7160e01b600052603260045260246000fd5b6000600182016123b2576123b261235b565b5060010190565b808201808211156123845761238461235b565b600181811c908216806123e057607f821691505b60208210810361240057634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561244c57600081815260208120601f850160051c8101602086101561242d5750805b601f850160051c820191505b8181101561180f57828155600101612439565b505050565b815167ffffffffffffffff81111561246b5761246b611e0e565b61247f8161247984546123cc565b84612406565b602080601f8311600181146124b4576000841561249c5750858301515b600019600386901b1c1916600185901b17855561180f565b600085815260208120601f198616915b828110156124e3578886015182559484019460019091019084016124c4565b50858210156125015787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8281526040602082015260006106406040830184611bed565b6000815480845260208085019450836000528060002060005b838110156120795781546001600160a01b031687529582019560019182019101612543565b6000815480845260208085019450836000528060002060005b8381101561207957815487529582019560019182019101612581565b8381526060602082015260006101208060608401526125c061018084018661252a565b838103605f190160808501526125d98160018801612568565b9050600286015460a08501526125f3600387015460ff1690565b151560c0850152600486015460e0850152600586015460ff8082161515610100870152600882901c1615158386015260101c6001600160a01b0390811661014086015260068701546101608601528516604085015291506106409050565b60008451612663818460208901611b9d565b82016001600160fb1b0384111561267957600080fd5b8360051b808683370195945050505050565b60608252600080825461269d816123cc565b80606087015260806001808416600081146126bf57600181146126d95761270a565b60ff1985168984015283151560051b89018301955061270a565b8760005260208060002060005b868110156127015781548c82018701529084019082016126e6565b8b018501975050505b5086015492506127239150506020860160ff83166121ee565b6001600160a01b03600882901c166040860152509392505050565b604081526000612751604083018561268b565b82810360208401526127638185612210565b95945050505050565b60006020828403121561277e57600080fd5b81518015158114611f7657600080fd5b602081526000611f766020830184612210565b8481526080602082015260006127ba608083018661268b565b6001600160a01b039490941660408301525090151560609091015292915050565b600083516127ed818460208801611b9d565b835190830190612801818360208801611b9d565b01949350505050565b8381526001600160a01b038316602082015260606040820181905260009061276390830184611bc1565b6060815260006128476060830186612166565b82810360208401526128598186612210565b91505060018060a01b0383166040830152949350505050565b60006020828403121561288457600080fd5b8151611f7681611cd056fe4a1d34b57ee9b41a098267d808770b616a3c2104efb03f483948529b427ea20a4a1d34b57ee9b41a098267d808770b616a3c2104efb03f483948529b427ea2094a1d34b57ee9b41a098267d808770b616a3c2104efb03f483948529b427ea210a264697066735822122045c9709edabee82b0202781cbf4e390c55b4485cc2b1308ed6d1d3e1d62357b964736f6c63430008110033",
  "devdoc": {
    "author": "Carlos Ramos",
    "details": "contract needs to check weather the caller is a member of the DAO - need to add terminus ",
    "events": {
      "CombinationSumitted(uint256,address,bytes)": {
        "params": {
          "combination": "- the combination submitted",
          "player": "- the one owner of the combination",
          "sessionId": "- index of the session"
        }
      },
      "GameOpened(uint256,(address,uint256,uint256[],string))": {
        "params": {
          "gameData": "- data of the new game created",
          "gameId": "- the index of the new game"
        }
      },
      "MoveSubmitted(uint256,(bytes,uint8,address),address,bool)": {
        "params": {
          "isFinalMove": "- weather will require you to submit combination",
          "moveData": "- data of the session",
          "player": "- the one who submits the move",
          "sessionId": "- the index of the session"
        }
      },
      "SessionEnded(uint256,address)": {
        "params": {
          "sessionId": "- index of the session",
          "winner": "- the winner of the game"
        }
      },
      "SessionJoined(uint256,(address[],bytes32[],uint256,bool,uint256,bool,bool,address,uint256),address)": {
        "params": {
          "player": "- the one who joins the session",
          "sessionData": "- data of the session",
          "sessionId": "- the index of the session"
        }
      },
      "SessionOpened(uint256,(address[],bytes32[],uint256,bool,uint256,bool,bool,address,uint256),address)": {
        "params": {
          "player": "- the one who opened the session",
          "sessionData": "- data of the session, data contains weather a session can be started",
          "sessionId": "- the index of the new session"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "joinSession(uint256,bytes32)": {
        "params": {
          "combinationHash": "- the combination hash of the player who joins this session",
          "sessionId": "- the index of the session"
        }
      },
      "openGame(address,uint256,uint256[],string)": {
        "params": {
          "_rules": "- the set of rules that the game has to follow",
          "_tokenAddr": "- the address of the 1155 to give after completing this game",
          "_validUntil": "- the deadline to play this game",
          "cid": "- the pdf stored in ipfs"
        }
      },
      "openSession(uint256,bytes32)": {
        "params": {
          "combinationHash": "- the combination hash of the first player",
          "gameId": "- the index of the game to open a session for"
        }
      },
      "setGameEngine(address)": {
        "details": "Owner can set the game engine Addr",
        "params": {
          "gameEngineAddr": "- "
        }
      },
      "submitCombitation(uint256,string,bytes)": {
        "details": "submits a combination to be verified with the initial hashed combination",
        "params": {
          "combination": "- the combination submitted when joined the game",
          "key": "- the key the user used to submit when joined the game",
          "sessionId": "- the index of the session"
        }
      },
      "submitMove((bytes,uint8,address),uint256)": {
        "params": {
          "_move": "- the data of the move being submitted",
          "sessionId": "- the index of the session"
        }
      }
    },
    "title": "SmartFacet Smart Contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "CombinationSumitted(uint256,address,bytes)": {
        "notice": "Emitted when combination is submitted"
      },
      "GameOpened(uint256,(address,uint256,uint256[],string))": {
        "notice": "Emitted when Game is opened by the owner"
      },
      "MoveSubmitted(uint256,(bytes,uint8,address),address,bool)": {
        "notice": "Emitted when a move is submitted"
      },
      "SessionEnded(uint256,address)": {
        "notice": "Emitted when session finishes"
      },
      "SessionJoined(uint256,(address[],bytes32[],uint256,bool,uint256,bool,bool,address,uint256),address)": {
        "notice": "Emitted when a user joins a session"
      },
      "SessionOpened(uint256,(address[],bytes32[],uint256,bool,uint256,bool,bool,address,uint256),address)": {
        "notice": "Emitted when a new session is created"
      }
    },
    "kind": "user",
    "methods": {
      "joinSession(uint256,bytes32)": {
        "notice": "joins a session that is already existing and pending"
      },
      "openGame(address,uint256,uint256[],string)": {
        "notice": "owner creates a new game"
      },
      "openSession(uint256,bytes32)": {
        "notice": "creates a session for the a given game"
      },
      "submitMove((bytes,uint8,address),uint256)": {
        "notice": "submits a move for the ongoing session         only if is the turn of the caller"
      }
    },
    "notice": "Development in progress - can contribute to the repo https://github.com/jrcarlos2000/eth-denver-contracts",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}